name: Action - Esteira DevOps .Net

on:
  push:
    branches: [ "main" ]   # só main roda deploy/docker/discord
  pull_request:
    branches: [ "main" ]   # PR roda apenas build e testes
  workflow_dispatch:

jobs:
  step-01-build:
    runs-on: windows-latest
    outputs:
      build-status: ${{ steps.set-status.outputs.status }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 5.0.x
      - run: dotnet restore AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln
      - run: dotnet build AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln --configuration Release --no-restore
      - id: set-status
        run: echo "status=success" >> $GITHUB_OUTPUT

  step-02-run-tests:
    runs-on: windows-latest
    needs: step-01-build
    outputs:
      passed: ${{ steps.set-outputs.outputs.passed }}
      failed: ${{ steps.set-outputs.outputs.failed }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 5.0.x
      - id: run-tests
        continue-on-error: true
        run: |
          dotnet test AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln \
            --configuration Release --no-build \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./test-results
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results/*.trx
      - id: set-outputs
        shell: bash
        run: |
          passed=$(grep -ro 'outcome="Passed"' ./test-results || true | wc -l)
          failed=$(grep -ro 'outcome="Failed"' ./test-results || true | wc -l)
          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT

  
  step-03-deploy:
    if: ${{ github.event_name == 'push' }}
    runs-on: windows-latest
    needs: step-02-run-tests
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 5.0.x
      - run: dotnet publish AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln --configuration Release --output ./publish
      - uses: actions/upload-artifact@v4
        with:
          name: ConsoleApp
          path: ./publish

  step-04-docker:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: step-03-deploy
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/build-push-action@v6
        with:
          context: ./AtividadeSomativaDevOps
          file: ./AtividadeSomativaDevOps/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/atividade-somativa:latest

  step-05-discord:
    if: ${{ always() && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [step-01-build, step-02-run-tests, step-03-deploy, step-04-docker]
    steps:
      - uses: johnnyhuy/actions-discord-git-webhook@main
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}
          args: |
             **Pipeline executado!**
             **Repositório:** ${{ github.repository }}
             **Branch:** ${{ github.ref_name }}
             **Autor:** @${{ github.actor }}
             **Commit:** "${{ github.event.head_commit.message }}"
             **Testes Passados:** ${{ needs.step-02-run-tests.outputs.passed }}
             **Testes Falhados:** ${{ needs.step-02-run-tests.outputs.failed }}
             **Docker:** Imagem publicada em ${{ secrets.DOCKER_USERNAME }}/atividade-somativa:latest
             [Ver workflow no GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
