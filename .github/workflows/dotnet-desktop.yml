name: Action - Esteira DevOps .Net

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  step-01-build:
    runs-on: windows-latest
    outputs:
      build-status: ${{ steps.set-status.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 5.0.x

      - name: Restore dependencies
        run: dotnet restore AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln

      - name: Build
        run: dotnet build AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln --configuration Release --no-restore

      - name: Set build status
        id: set-status
        run: |
          echo "status=success" >> $GITHUB_OUTPUT

  step-02-run-tests:
    runs-on: windows-latest
    needs: step-01-build
    outputs:
      passed: ${{ steps.set-outputs.outputs.passed }}
      failed: ${{ steps.set-outputs.outputs.failed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 5.0.x

      - name: Run Unit Tests
        id: run-tests
        continue-on-error: true
        run: |
          dotnet test AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln \
            --configuration Release --no-build \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./test-results

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results/*.trx

      - name: Parse Test Results and Set Outputs
        id: set-outputs
        shell: bash
        run: |
          # procura arquivos .trx em ./test-results; soma ocorrências Passed/Failed
          passed=0
          failed=0
          files=$(ls ./test-results/*.trx 2>/dev/null || true)
          if [ -n "$files" ]; then
            for f in ./test-results/*.trx; do
              p=$(grep -o 'outcome="Passed"' "$f" | wc -l)
              fcount=$(grep -o 'outcome="Failed"' "$f" | wc -l)
              passed=$((passed + p))
              failed=$((failed + fcount))
            done
          fi
          echo "passed=$passed" >> $GITHUB_OUTPUT
          echo "failed=$failed" >> $GITHUB_OUTPUT

  step-03-deploy:
    if: ${{ github.event_name == 'push' }}
    runs-on: windows-latest
    needs: step-02-run-tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 5.0.x

      - name: Publish App
        run: dotnet publish AtividadeSomativaDevOps/AtividadeSomativaDevOps.sln --configuration Release --output ./publish

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ConsoleApp
          path: ./publish

  step-04-docker:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: step-03-deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: ./AtividadeSomativaDevOps
          file: ./AtividadeSomativaDevOps/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/atividade-somativa:latest

  step-05-discord:
    
    if: ${{ always() && github.event_name == 'push' }}
    runs-on: ubuntu-latest
    needs: [step-01-build, step-02-run-tests, step-03-deploy, step-04-docker]
    steps:
      - name: Send Discord Notification
        uses: johnnyhuy/actions-discord-git-webhook@main
        with:
          webhook_url: ${{ secrets.DISCORD_WEBHOOK }}
          args: |
            **Pipeline executado!**
            **Repositório:** ${{ github.repository }}
            **Branch:** ${{ github.ref_name }}
            **Autor:** @${{ github.actor }}
            **Commit:** "${{ github.event.head_commit.message }}"
            **Testes Passados:** ${{ needs.step-02-run-tests.outputs.passed }}
            **Testes Falhados:** ${{ needs.step-02-run-tests.outputs.failed }}
            **Docker:** Imagem publicada em ${{ secrets.DOCKER_USERNAME }}/atividade-somativa:latest
            [Ver workflow no GitHub](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            Action usada: [johnnyhuy/actions-discord-git-webhook](https://github.com/johnnyhuy/actions-discord-git-webhook)
